# 모놀리식과 마이크로서비스 아키텍처
## 모놀리식 아키텍처란

모놀리식 아키텍처는 소프트웨어 애플리케이션을 하나의 큰 코드 베이스로 구현하는 방식

- 애플리케이션의 모든 기능이 단일한 실행 가능한 파일에 포함
    - 이 파일은 하나의 프로세스에서 실행됨

### 모놀리식 아키텍처의 장단점

- 장점
    - 초기 소프트웨어 개발 단계에서는 구현하기 쉬움
    - 배포와 관리도 비교적 간단
- 단점
    - 시간이 지나면서 애플리케이션의 크기와 복잡도가 증가하면서
        - 유지보수가 어려워짐
        - 새로운 기능 추가나 확장이 어려워짐

## 마이크로서비스 아키텍처란

마이크로서비스 아키텍처는 애플리케이션을 작은 독립적인 서비스로 분할하여 개발

- 서비스 간에는 API를 통해 통신

### 마이크로서비스 아키텍처의 장단점

- 장점
    - 개발 및 유지보수가 쉬워짐
    - 확장성과 유연성이 높아짐
- 단점
    - 애플리케이션을 여러 개의 작은 서비스로 분할하기 때문에
        - 많은 수의 서비스가 생성되어 서비스간의 통신, 배포, 관리 등이 복잡해질 수 있음
    - 서비스 간의 통신에 있어 보안 문제가 발생할 수 있음
        - 서비스 간의 통신 시에 암호화하고 인증하는 것이 중요하며
        - 따라서 추가적인 노력과 비용이 발생 가능
    - MSA를 구현하려면 고도로 분산되고 자동화된 시스템을 구축해야함
        - 이를 위해서 기술적인 스킬이 필요함
    - **장애 처리가 어려움**
        
        > 💬 **왜일까?**
        > 
        > 
        > 처음에 나는 MSA에서는 각 서비스들이 분리가 되어있기 때문에 한 서비스에서 장애가 일어나도, 다른 서비스들에게 상대적으로 미치는 영향이 적을 것라고 생각했다. 
        > 고로 장애 처리가 모놀리식보다 쉽지 않을까라고 생각했지만 그게 아니란다. **왜일까?**
        > 

# 모놀리식 vs 마이크로서비스 아키텍처

## 장애 처리 측면에서 비교?!

### **모놀리식 아키텍처의 장애 처리**

모놀리식 아키텍처에서는 하나의 서비스의 장애가 전체 시스템에 영향을 미치는 경우가 많음

- 이 경우, 전체 시스템의 장애 처리와 복구는 모놀리식 아키텍처를 가진 **개발자들이 직접 처리 가능**

### **마이크로서비스 아키텍처 처리**

마이크로서비스 아키텍처에서는 서로 다른 서버에서 실행되기 때문에, 모놀리식 아키텍처처럼 하나의 서비스의 장애는 전체 시스템에 영향을 미칠 수 있음

- **그러나**, 이 경우에는 모든 서비스가 독립적으로 실행되기 때문에,
    - **각각의 서비스에 대한 장애 처리와 복구 작업**이 필요
- 또한, 마이크로서비스 아키텍처에서는 다양한 서비스들이 **상호 의존적**이기 때문에,
    - 하나의 서비스의 장애가 다른 서비스에도 영향을 미치는 경우가 있음
- 이러한 경우, 개발자들은 **서비스 간의 의존성을 이해**하고,
    - 각각의 서비스에 대한 적절한 장애 처리와 복구 전략을 계획하고 실행해야 함
    
[참고 링크](https://yozm.wishket.com/magazine/detail/1813/)